{
  "commonResults": [
    {
      "key": "alertError",
      "type": "error",
      "regulars": [
        "(?<=var message = \").*(?=\";)"
      ]
    },
    {
      "key": "busyError1",
      "type": "error",
      "path": "//*[@id=\"err_bot\"]"
    },
    {
      "key": "busyError2",
      "type": "error",
      "path": "/html/body/div/div/div[1]/text()"
    }
  ],
  "actions": [
    {
      "name": "get_login_verify_code",
      "steps": [
        {
          "HttpMethod": "Get",
          "resultType": "html",
          "encoding": "utf8",
          "url": "https://dynamic.12306.cn/otsweb/passCodeAction.do?rand=sjrand",
          "params": [
          ],
          "results": [
            {
              "key": "verifyImage",
              "type": "stream"
            }
          ]
        }
      ]
    },
    {
      "name": "login",
      "steps": [
        {
          "HttpMethod": "Post",
          "resultType": "json",
          "encoding": "utf8",
          "referer": "https://dynamic.12306.cn/otsweb/loginAction.do?method=init",
          "url": "https://dynamic.12306.cn/otsweb/loginAction.do?method=loginAysnSuggest",
          "params": [
          ],
          "results": [
            {
              "key": "randCode",
              "type": "text",
              "path": "loginRand"
            }
          ]
        },
        {
          "HttpMethod": "Post",
          "resultType": "html",
          "encoding": "utf8",
          "referer": "https://dynamic.12306.cn/otsweb/loginAction.do?method=init",
          "url": "https://dynamic.12306.cn/otsweb/loginAction.do?method=login",
          "params": [
            {
              "key": "randCode",
              "value": "loginRand"
            },
            {
              "key": "userName",
              "value": "loginUser.user_name"
            },
            {
              "key": "password",
              "value": "user.password"
            },
            {
              "key": "verifyCode",
              "value": "randCode"
            }
          ],
          "results": [
            {
              "key": "verifyCodeError",
              "type": "text",
              "path": "//*[@id=\"randErr\"]/span"
            },
            {
              "key": "realName",
              "type": "text",
              "path": "/html/body/div/div/div[1]/div[2]/div[1]"
            }
          ]
        }
      ]
    },
    {
      "name": "logout",
      "steps": [
        {
          "HttpMethod": "Get",
          "resultType": "html",
          "encoding": "utf8",
          "url": "https://dynamic.12306.cn/otsweb/loginAction.do?method=logout",
          "params": [
          ],
          "results": [
          ]
        }
      ]
    },
    {
      "name": "get_station_list",
      "steps": [
        {
          "HttpMethod": "Get",
          "resultType": "html",
          "encoding": "utf8",
          "url": "https://dynamic.12306.cn/otsweb/js/common/station_name.js?version=5.60",
          "params": [
          ],
          "results": [
            {
              "key": "allStations",
              "type": "array",
              "regulars": [
                "[a-z]{3}\\|.{1,9}\\|[A-Z]{3}\\|\\w*\\|\\w*\\|"
              ]
            }
          ]
        },
        {
          "HttpMethod": "Get",
          "resultType": "html",
          "encoding": "utf8",
          "url": "https://dynamic.12306.cn/otsweb/js/common/favorite_name.js?version=5.60",
          "params": [
          ],
          "results": [
            {
              "key": "popStations",
              "type": "array",
              "regulars": [
                "[a-z]{3}\\|.{1,9}\\|[A-Z]{3}"
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "get_trains_between_station",
      "steps": [
        {
          "HttpMethod": "Post",
          "resultType": "json",
          "encoding": "utf8",
          "referer": "https://dynamic.12306.cn/otsweb/order/querySingleAction.do?method=init",
          "url": "https://dynamic.12306.cn/otsweb/order/querySingleAction.do?method=queryststrainall",
          "params": [
            {
              "key": "date",
              "value": "date"
            },
            {
              "key": "fromStation",
              "value": "fromstation"
            },
            {
              "key": "toStation",
              "value": "tostation"
            },
            {
              "key": "startTime",
              "value": "starttime",
              "default": "00:00--24:00"
            }
          ],
          "results": [
            {
              "key": "trains",
              "type": "array"
            }
          ]
        }
      ]
    },
    {
      "name": "query_tickets",
      "steps": [
        {
          "HttpMethod": "Get",
          "resultType": "html",
          "encoding": "utf8",
          "referer": "http://dynamic.12306.cn/otsquery/query/queryRemanentTicketAction.do?method=init",
          "url": "http://dynamic.12306.cn/otsquery/query/queryRemanentTicketAction.do?method=queryLeftTicket",
          "params": [
            {
              "key": "date",
              "value": "orderRequest.train_date"
            },
            {
              "key": "fromStation",
              "value": "orderRequest.from_station_telecode"
            },
            {
              "key": "toStation",
              "value": "orderRequest.to_station_telecode"
            },
            {
              "key": "trainId",
              "value": "orderRequest.train_no"
            },
            {
              "value": "trainPassType",
              "default": "QB"
            },
            {
              "value": "trainClass",
              "default": "QB%23D%23Z%23T%23K%23QT%23"
            },
            {
              "value": "includeStudent",
              "default": "00"
            },
            {
                     "key": "trainId",
              "value": "seatTypeAndNum"
            },
            {
              "value": "orderRequest.start_time_str",
              "default": "00%3A00--24%3A00"
            }
          ],
          "results": [
            {
              "key": "tickets",
              "type": "array",
              "regulars": [
                "<((?!\\\\n).)*"
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "get_tickets",
      "steps": [
        {
          "HttpMethod": "Get",
          "resultType": "html",
          "encoding": "utf8",
          "referer": "https://dynamic.12306.cn/otsweb/order/querySingleAction.do?method=init",
          "url": "https://dynamic.12306.cn/otsweb/order/querySingleAction.do?method=queryLeftTicket",
          "params": [
                     {
                     "key": "date",
                     "value": "orderRequest.train_date"
                     },
                     {
                     "key": "fromStation",
                     "value": "orderRequest.from_station_telecode"
                     },
                     {
                     "key": "toStation",
                     "value": "orderRequest.to_station_telecode"
                     },
                     {
                     "key": "trainId",
                     "value": "orderRequest.train_no"
                     },
                     {
                     "value": "trainPassType",
                     "default": "QB"
                     },
                     {
                     "value": "trainClass",
                     "default": "QB%23D%23Z%23T%23K%23QT%23"
                     },
                     {
                     "value": "includeStudent",
                     "default": "00"
                     },
                     {
                     "key": "trainId",
                     "value": "seatTypeAndNum"
                     },
                     {
                     "value": "orderRequest.start_time_str",
                     "default": "00%3A00--24%3A00"
                     }
          ],
          "results": [
            {
              "key": "tickets",
              "type": "array",
              "regulars": [
                "<((?!\\\\n).)*"
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "init_order",
      "steps": [
        {
          "HttpMethod": "Post",
          "resultType": "html",
          "encoding": "utf8",
          "referer": "https://dynamic.12306.cn/otsweb/order/querySingleAction.do?method=init",
          "url": "https://dynamic.12306.cn/otsweb/order/querySingleAction.do?method=submutOrderRequest",
          "params": [
            {
              "key": "trainNo",
              "value": "station_train_code"
            },
            {
              "key": "startDate",
              "value": "train_date"
            },
            {
              "key": "seatType",
              "value": "seattype_num",
              "default": " "
            },
            {
              "key": "startStationCode",
              "value": "from_station_telecode"
            },
            {
              "key": "endStationCode",
              "value": "to_station_telecode"
            },
            {
              "key": "includeStudent",
              "value": "include_student",
              "default": "00"
            },
            {
              "key": "startStationName",
              "value": "from_station_telecode_name"
            },
            {
              "key": "endStationName",
              "value": "to_station_telecode_name"
            },
            {
              "key": "currentDate",
              "value": "round_train_date"
            },
            {
              "key": "unknown",
              "value": "round_start_time_str",
              "default": "00:00--24:00"
            },
            {
              "key": "unknown",
              "value": "single_round_type",
              "default": "1"
            },
            {
              "key": "passType",
              "value": "train_pass_type",
              "default": "QB"
            },
            {
              "key": "trainClasses",
              "value": "train_class_arr",
              "default": "QB#D#Z#T#K#QT#"
            },
            {
              "key": "startTime",
              "value": "start_time_str",
              "default": "00:00--24:00"
            },
            {
              "key": "lastTime",
              "value": "lishi"
            },
            {
              "key": "trainStartTime",
              "value": "train_start_time"
            },
            {
              "key": "trainId",
              "value": "trainno4"
            },
            {
              "key": "trainArriveTime",
              "value": "arrive_time"
            },
            {
              "key": "fromStationName",
              "value": "from_station_name"
            },
            {
              "key": "toStationName",
              "value": "to_station_name"
            },
            {
              "key": "fromStationNo",
              "value": "from_station_no"
            },
            {
              "key": "toStationNo",
              "value": "to_station_no"
            },
            {
              "key": "ticketCode",
              "value": "ypInfoDetail"
            },
            {
              "key": "mmStr",
              "value": "mmStr"
            },
            {
              "key": "locationCode",
              "value": "locationCode"
            }
          ],
          "results": [
          ]
        },
        {
          "HttpMethod": "Get",
          "resultType": "html",
          "encoding": "utf8",
          "referer": "https://dynamic.12306.cn/otsweb/order/querySingleAction.do?method=init",
          "url": "https://dynamic.12306.cn/otsweb/order/confirmPassengerAction.do?method=init",
          "params": [
          ],
          "results": [
            {
              "key": "price",
              "type": "array",
              "regulars": [
                "(?<=<td>).{1,9}\\(.{4,9}元\\).{1,9}(?=</td>)"
              ]
            },
            {
              "key": "seatType",
              "type": "array",
              "path": "//*[@id=\"passenger_1_seat\"]/option"
            },
            {
              "key": "ticketType",
              "type": "array",
              "path": "//*[@id=\"passenger_1_ticket\"]/option"
            },
            {
              "key": "certType",
              "type": "array",
              "path": "//*[@id=\"passenger_1_cardtype\"]/option"
            },
            {
              "key": "token",
              "type": "text",
              "regulars": [
                "(?<=<input type=\"hidden\" name=\"org.apache.struts.taglib.html.TOKEN\" value=\").*(?=\">)"
              ]
            },
            {
              "key": "leftTicketStr",
              "type": "text",
              "regulars": [
                "<input type=\"hidden\" name=\"leftTicketStr\" id=\"left_ticket\"\\r*\\s*\\r*value=\".*\" />",
                "(?<=value=\").*(?=\")"
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "get_order_verify_code",
      "steps": [
        {
          "HttpMethod": "Get",
          "resultType": "html",
          "encoding": "utf8",
          "url": "https://dynamic.12306.cn/otsweb/passCodeAction.do?rand=randp",
          "params": [
          ],
          "results": [
            {
              "key": "verifyImage",
              "type": "stream"
            }
          ]
        }
      ]
    },
    {
      "name": "get_passengers",
      "steps": [
        {
          "HttpMethod": "Post",
          "resultType": "json",
          "encoding": "utf8",
          "referer": "https://dynamic.12306.cn/otsweb/order/confirmPassengerAction.do?method=init",
          "url": "https://dynamic.12306.cn/otsweb/order/confirmPassengerAction.do?method=getpassengerJson",
          "params": [
          ],
          "results": [
            {
              "key": "passengerJson",
              "type": "text",
              "path": "passengerJson"
            }
          ]
        }
      ]
    },
    {
      "name": "order_place",
      "steps": [
        {
          "HttpMethod": "Post",
          "resultType": "json",
          "encoding": "utf8",
          "referer": "https://dynamic.12306.cn/otsweb/order/confirmPassengerAction.do?method=init",
          "url": "https://dynamic.12306.cn/otsweb/order/confirmPassengerAction.do?method=checkOrderInfo",
          "QueryStringParams": [
            {
              "key": "verifyCode",
              "value": "rand"
            }
          ],
          "params": [
            {
              "key": "token",
              "value": "org.apache.struts.taglib.html.TOKEN"
            },
            {
              "key": "leftTicketStr",
              "value": "leftTicketStr"
            },
            {
              "key": "date",
              "value": "orderRequest.train_date"
            },
            {
              "key": "trainId",
              "value": "orderRequest.train_no"
            },
            {
              "key": "trainNo",
              "value": "orderRequest.station_train_code"
            },
            {
              "key": "startStationCode",
              "value": "orderRequest.from_station_telecode"
            },
            {
              "key": "endStationCode",
              "value": "orderRequest.to_station_telecode"
            },
            {
              "key": "",
              "value": "orderRequest.seat_type_code",
              "default": " "
            },
            {
              "key": "",
              "value": "orderRequest.seat_detail_type_code",
              "default": " "
            },
            {
              "key": "",
              "value": "orderRequest.ticket_type_order_num",
              "default": " "
            },
            {
              "key": "",
              "value": "orderRequest.bed_level_order_num",
              "default": "000000000000000000000000000000"
            },
            {
              "key": "startTime",
              "value": "orderRequest.start_time"
            },
            {
              "key": "endTime",
              "value": "orderRequest.end_time"
            },
            {
              "key": "startStationName",
              "value": "orderRequest.from_station_name"
            },
            {
              "key": "endStationName",
              "value": "orderRequest.to_station_name"
            },
            {
              "key": "",
              "value": "orderRequest.cancel_flag",
              "default": "1"
            },
            {
              "key": "",
              "value": "orderRequest.id_mode",
              "default": "Y"
            },
            {
              "keys": "passengerTickets[n]",
              "value": "passengerTickets"
            },
            {
              "keys": "oldPassengers[n]",
              "value": "oldPassengers"
            },
            {
              "keys": "passengerSeatCode[n]",
              "value": "passenger_[n]_seat"
            },
            {
              "keys": "passengerSeatDetailSelect[n]",
              "value": "passenger_[n]_seat_detail_select"
            },
            {
              "keys": "passengerSeatDetail[n]",
              "value": "passenger_[n]_seat_detail"
            },
            {
              "keys": "passengerTicketCode[n]",
              "value": "passenger_[n]_ticket"
            },
            {
              "keys": "passengerName[n]",
              "value": "passenger_[n]_name"
            },
            {
              "keys": "passengerCertType[n]",
              "value": "passenger_[n]_cardtype"
            },
            {
              "keys": "passengerCertNo[n]",
              "value": "passenger_[n]_cardno"
            },
            {
              "keys": "passengerMobile[n]",
              "value": "passenger_[n]_mobileno"
            },
            {
              "key": "verifyCode",
              "value": "randCode"
            },
            {
              "key": "",
              "value": "orderRequest.reserve_flag",
              "default": "A"
            }
          ],
          "results": [
            {
              "key": "errMsg",
              "type": "text",
              "path": "errMsg"
            }
          ],
          "errors": [
            {
              "key": "msg",
              "type": "text",
              "path": "msg"
            }
          ]
        },
        {
          "HttpMethod": "Get",
          "resultType": "json",
          "encoding": "utf8",
          "referer": "https://dynamic.12306.cn/otsweb/order/confirmPassengerAction.do?method=init",
          "url": "https://dynamic.12306.cn/otsweb/order/confirmPassengerAction.do?method=getQueueCount",
          "params": [
            {
              "key": "date",
              "value": "train_date"
            },
            {
              "key": "trainId",
              "value": "train_no"
            },
            {
              "key": "trainNo",
              "value": "station"
            },
            {
              "key": "passengerSeatCode1",
              "value": "seat"
            },
            {
              "key": "startStationCode",
              "value": "from"
            },
            {
              "key": "endStationCode",
              "value": "to"
            },
            {
              "key": "leftTicketStr",
              "value": "ticket"
            }
          ]
        },
        {
          "HttpMethod": "Post",
          "resultType": "json",
          "encoding": "utf8",
          "waitTime": "1",
          "referer": "https://dynamic.12306.cn/otsweb/order/confirmPassengerAction.do?method=init",
          "url": "https://dynamic.12306.cn/otsweb/order/confirmPassengerAction.do?method=confirmSingleForQueue",
          "params": [
            {
              "key": "token",
              "value": "org.apache.struts.taglib.html.TOKEN"
            },
            {
              "key": "leftTicketStr",
              "value": "leftTicketStr"
            },
            {
              "key": "date",
              "value": "orderRequest.train_date"
            },
            {
              "key": "trainId",
              "value": "orderRequest.train_no"
            },
            {
              "key": "trainNo",
              "value": "orderRequest.station_train_code"
            },
            {
              "key": "startStationCode",
              "value": "orderRequest.from_station_telecode"
            },
            {
              "key": "endStationCode",
              "value": "orderRequest.to_station_telecode"
            },
            {
              "key": "",
              "value": "orderRequest.seat_type_code",
              "default": " "
            },
            {
              "key": "",
              "value": "orderRequest.seat_detail_type_code",
              "default": " "
            },
            {
              "key": "",
              "value": "orderRequest.ticket_type_order_num",
              "default": " "
            },
            {
              "key": "",
              "value": "orderRequest.bed_level_order_num",
              "default": "000000000000000000000000000000"
            },
            {
              "key": "startTime",
              "value": "orderRequest.start_time"
            },
            {
              "key": "endTime",
              "value": "orderRequest.end_time"
            },
            {
              "key": "startStationName",
              "value": "orderRequest.from_station_name"
            },
            {
              "key": "endStationName",
              "value": "orderRequest.to_station_name"
            },
            {
              "key": "",
              "value": "orderRequest.cancel_flag",
              "default": "1"
            },
            {
              "key": "",
              "value": "orderRequest.id_mode",
              "default": "Y"
            },
            {
              "keys": "passengerTickets[n]",
              "value": "passengerTickets"
            },
            {
              "keys": "oldPassengers[n]",
              "value": "oldPassengers"
            },
            {
              "keys": "passengerSeatCode[n]",
              "value": "passenger_[n]_seat"
            },
            {
              "keys": "passengerSeatDetailSelect[n]",
              "value": "passenger_[n]_seat_detail_select"
            },
            {
              "keys": "passengerSeatDetail[n]",
              "value": "passenger_[n]_seat_detail"
            },
            {
              "keys": "passengerTicketCode[n]",
              "value": "passenger_[n]_ticket"
            },
            {
              "keys": "passengerName[n]",
              "value": "passenger_[n]_name"
            },
            {
              "keys": "passengerCertType[n]",
              "value": "passenger_[n]_cardtype"
            },
            {
              "keys": "passengerCertNo[n]",
              "value": "passenger_[n]_cardno"
            },
            {
              "keys": "passengerMobile[n]",
              "value": "passenger_[n]_mobileno"
            },
            {
              "key": "verifyCode",
              "value": "randCode"
            },
            {
              "key": "",
              "value": "orderRequest.reserve_flag",
              "default": "A"
            }
          ],
          "results": [
            {
              "key": "errMsg",
              "type": "text",
              "path": "errMsg"
            }
          ]
        },
        {
          "Loop": "Y",
          "HttpMethod": "Get",
          "resultType": "json",
          "encoding": "utf8",
          "referer": "https://dynamic.12306.cn/otsweb/order/confirmPassengerAction.do?method=init",
          "url": "https://dynamic.12306.cn/otsweb/order/myOrderAction.do?method=queryOrderWaitTime&tourFlag=dc",
          "results": [
            {
              "key": "waitTime",
              "type": "text",
              "path": "waitTime"
            },
            {
              "key": "orderNo",
              "type": "text",
              "path": "orderId"
            },
            {
              "key": "msg",
              "type": "text",
              "path": "msg"
            }
          ],
          "errors": [
            {
              "key": "msg",
              "type": "text",
              "path": "msg"
            }
          ]
        },
        {
          "HttpMethod": "Post",
          "resultType": "html",
          "encoding": "utf8",
          "referer": "https://dynamic.12306.cn/otsweb/order/confirmPassengerAction.do?method=init",
          "url": "https://dynamic.12306.cn/otsweb/order/confirmPassengerAction.do?method=payOrder",
          "QueryStringParams": [
            {
              "key": "orderNo",
              "value": "orderSequence_no"
            }
          ],
          "params": [
            {
              "key": "token",
              "value": "org.apache.struts.taglib.html.TOKEN"
            },
            {
              "key": "leftTicketStr",
              "value": "leftTicketStr"
            },
            {
              "key": "date",
              "value": "orderRequest.train_date"
            },
            {
              "key": "trainId",
              "value": "orderRequest.train_no"
            },
            {
              "key": "trainNo",
              "value": "orderRequest.station_train_code"
            },
            {
              "key": "startStationCode",
              "value": "orderRequest.from_station_telecode"
            },
            {
              "key": "endStationCode",
              "value": "orderRequest.to_station_telecode"
            },
            {
              "key": "",
              "value": "orderRequest.seat_type_code",
              "default": " "
            },
            {
              "key": "",
              "value": "orderRequest.seat_detail_type_code",
              "default": " "
            },
            {
              "key": "",
              "value": "orderRequest.ticket_type_order_num",
              "default": " "
            },
            {
              "key": "",
              "value": "orderRequest.bed_level_order_num",
              "default": "000000000000000000000000000000"
            },
            {
              "key": "startTime",
              "value": "orderRequest.start_time"
            },
            {
              "key": "endTime",
              "value": "orderRequest.end_time"
            },
            {
              "key": "startStationName",
              "value": "orderRequest.from_station_name"
            },
            {
              "key": "endStationName",
              "value": "orderRequest.to_station_name"
            },
            {
              "key": "",
              "value": "orderRequest.cancel_flag",
              "default": "1"
            },
            {
              "key": "",
              "value": "orderRequest.id_mode",
              "default": "Y"
            },
            {
              "keys": "passengerTickets[n]",
              "value": "passengerTickets"
            },
            {
              "keys": "oldPassengers[n]",
              "value": "oldPassengers"
            },
            {
              "keys": "passengerSeatCode[n]",
              "value": "passenger_[n]_seat"
            },
            {
              "keys": "passengerSeatDetailSelect[n]",
              "value": "passenger_[n]_seat_detail_select"
            },
            {
              "keys": "passengerSeatDetail[n]",
              "value": "passenger_[n]_seat_detail"
            },
            {
              "keys": "passengerTicketCode[n]",
              "value": "passenger_[n]_ticket"
            },
            {
              "keys": "passengerName[n]",
              "value": "passenger_[n]_name"
            },
            {
              "keys": "passengerCertType[n]",
              "value": "passenger_[n]_cardtype"
            },
            {
              "keys": "passengerCertNo[n]",
              "value": "passenger_[n]_cardno"
            },
            {
              "keys": "passengerMobile[n]",
              "value": "passenger_[n]_mobileno"
            },
            {
              "key": "verifyCode",
              "value": "randCode"
            },
            {
              "key": "",
              "value": "orderRequest.reserve_flag",
              "default": "A"
            }
          ],
          "results": [
            {
              "key": "tickets",
              "type": "array",
              "path": "/html/body/div/div/table/tr"
            },
            {
              "key": "totalPrice",
              "type": "text",
              "regulars": [
                "(?<=总票价：).*(?=元)"
              ]
            },
            {
              "key": "token",
              "type": "text",
              "regulars": [
                "(?<=<input type=\"hidden\" name=\"org.apache.struts.taglib.html.TOKEN\" value=\").*(?=\">)"
              ]
            },
            {
              "key": "fields",
              "type": "array",
              "path": "//*[@id=\"epayForm\"]/input"
            }
          ]
        }
      ]
    },
    {
      "name": "init_payment",
      "steps": [
        {
          "HttpMethod": "Post",
          "resultType": "html",
          "encoding": "utf8",
          "url": "https://epay.12306.cn/pay/payGateway",
          "params": [
            {
              "dict": "epayForm"
            }
          ],
          "results": [
            {
              "key": "fields",
              "type": "array",
              "path": "/html/body/div[2]/div[2]/div/form/input"
            },
            {
              "key": "cmbCode",
              "type": "text",
              "regulars": [
                "<img.*招商银行.*>",
                "(?<=\\(')\\d*(?='\\))"
              ]
            },
            {
              "key": "ccbCode",
              "type": "text",
              "regulars": [
                "<img.*建设银行.*>",
                "(?<=\\(')\\d*(?='\\))"
              ]
            },
            {
              "key": "chinaPayCode",
              "type": "text",
              "regulars": [
                "<img.*中国银联.*>",
                "(?<=\\(')\\d*(?='\\))"
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "get_incomplete_order",
      "steps": [
        {
          "HttpMethod": "Get",
          "resultType": "html",
          "encoding": "utf8",
          "referer": "https://dynamic.12306.cn/otsweb/loginAction.do?method=login",
          "url": "https://dynamic.12306.cn/otsweb/order/myOrderAction.do?method=queryMyOrderNotComplete&leftmenu=Y",
          "results": [
            {
              "key": "tickets",
              "type": "array",
              "path": "//table[@class=\"table_clist\"]"
            },
            {
              "key": "token",
              "type": "text",
              "regulars": [
                "(?<=<input type=\"hidden\" name=\"org.apache.struts.taglib.html.TOKEN\" value=\").*(?=\">)"
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "get_complete_order",
      "steps": [
        {
          "HttpMethod": "Post",
          "resultType": "html",
          "encoding": "utf8",
          "referer": "https://dynamic.12306.cn/otsweb/order/myOrderAction.do?method=queryMyOrderNotComplete&leftmenu=Y",
          "url": "https://dynamic.12306.cn/otsweb/order/myOrderAction.do?method=queryMyOrder",
          "params": [
            {
              "key": "token",
              "value": "org.apache.struts.taglib.html.TOKEN"
            },
            {
              "key": "fromDate",
              "value": "queryOrderDTO.from_order_date"
            },
            {
              "key": "toDate",
              "value": "queryOrderDTO.to_order_date"
            },
            {
              "value": "queryOrderDTO.location_code",
              "default": "_1"
            },
            {
              "value": "leftmenu",
              "default": "Y"
            },
            {
              "value": "queryDataFlag",
              "default": "2"
            },
            {
              "value": "queryOrderDTO.sequence_no",
              "default": " "
            },
            {
              "value": "queryOrderDTO.train_code",
              "default": " "
            },
            {
              "value": "queryOrderDTO.name",
              "default": " "
            }
          ],
          "results": [
            {
              "key": "tickets",
              "type": "array",
              "path": "//table[@class=\"table_clist\"]"
            },
            {
              "key": "token",
              "type": "text",
              "regulars": [
                "(?<=<input type=\"hidden\" name=\"org.apache.struts.taglib.html.TOKEN\" value=\").*(?=\">)"
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "goto_payment",
      "steps": [
        {
          "HttpMethod": "Post",
          "resultType": "html",
          "encoding": "utf8",
          "referer": "http://dynamic.12306.cn/otsweb/order/myOrderAction.do?method=queryMyOrderNotComplete&leftmenu=Y",
          "url": "https://dynamic.12306.cn/otsweb/order/myOrderAction.do?method=laterEpay&con_pay_type=epay",
          "QueryStringParams": [
            {
              "key": "sequenceNo",
              "value": "orderSequence_no"
            }
          ],
          "params": [
            {
              "key": "token",
              "value": "org.apache.struts.taglib.html.TOKEN"
            },
            {
              "key": "key",
              "value": "ticket_key"
            },
            {
              "key": "",
              "value": "queryOrderDTO.from_order_date",
              "default": " "
            },
            {
              "key": "",
              "value": "queryOrderDTO.to_order_date",
              "default": " "
            }
          ],
          "results": [
            {
              "key": "fields",
              "type": "array",
              "path": "//*[@id=\"epayForm\"]/input"
            }
          ]
        }
      ]
    },
    {
      "name": "cancel_order",
      "steps": [
        {
          "HttpMethod": "Post",
          "resultType": "html",
          "encoding": "utf8",
          "referer": "http://dynamic.12306.cn/otsweb/order/myOrderAction.do?method=queryMyOrderNotComplete&leftmenu=Y",
          "url": "https://dynamic.12306.cn/otsweb/order/orderAction.do?method=cancelMyOrderNotComplete",
          "params": [
            {
              "key": "token",
              "value": "org.apache.struts.taglib.html.TOKEN"
            },
            {
              "key": "sequenceNo",
              "value": "sequence_no"
            },
            {
              "key": "",
              "value": "orderRequest.tour_flag",
              "default": " "
            }
          ]
        }
      ]
    },
    {
      "name": "goto_webBusiness",
      "steps": [
        {
          "HttpMethod": "Post",
          "resultType": "html",
          "encoding": "utf8",
          "url": "https://epay.12306.cn/pay/webBusiness",
          "params": [
            {
              "dict": "paymentForm"
            }
          ],
          "results": [
            {
              "key": "webBusinessForm",
              "type": "array",
              "path": "/html/body/form/input"
            },
            {
              "key": "duplicateError",
              "type": "text",
              "path": "/html/body/div[2]/table/tr[2]/td/div/div[3]"
            }
          ]
        }
      ]
    },
    {
      "name": "chinapay_payment",
      "steps": [
        {
          "HttpMethod": "Post",
          "resultType": "html",
          "encoding": "utf8",
          "referer": "https://epay.12306.cn/pay/webBusiness",
          "url": "https://unionpaysecure.com/api/Pay.action",
          "params": [
            {
              "form": "chinaPayForm"
            }
          ],
          "results": [
            {
              "key": "transNumber",
              "type": "text",
              "regulars": [
                "(?<=<input type=\"hidden\" id=\"transNumber\" name=\"transNumber\" value=\").*(?=\" />)"
              ]
            }
          ]
        },
        {
          "HttpMethod": "Post",
          "resultType": "html",
          "encoding": "utf8",
          "url": "https://unionpaysecure.com/pay/CSPay.action?",
          "QueryStringParams": [
            {
              "key": "transNumber",
              "value": "transNumber"
            }
          ],
          "params": [
            {
              "key": "transNumber",
              "value": "transNumber"
            }
          ],
          "results": [
            {
              "key": "transNumber",
              "type": "text",
              "regulars": [
                "(?<=<input id=\"transNumber\" name=\"transNumber\" value=\").*(?=\" type=\"hidden\" /><input)"
              ]
            },
            {
              "key": "_sourcePage",
              "type": "text",
              "regulars": [
                "(?<=<input type=\"hidden\" name=\"_sourcePage\" value=\").*(?=\" /><input)"
              ]
            },
            {
              "key": "__fp",
              "type": "text",
              "regulars": [
                "(?<=<input type=\"hidden\" name=\"__fp\" value=\").*(?=\" /></div>)"
              ]
            }
          ]
        }
      ]
    }
  ],
  "MaxBookingDays": 20,
  "SPDBBankCode": "12",
  "CEBBankCode": "10",
  "BOCOBankCode": "05",
  "PinganBankCode": "16",
  "BookingTels": [
    "96006",
    "95105105"
  ],
  "LuaScript": "function GetStations(allStations, popStations)\n    local popStationCodes = {}\n    for i = 1, #popStations do\n        local string = toobjc(popStations[i])\n        local components = string:componentsSeparatedByString(\"|\")\n        popStationCodes[i] = components[3]\n    end\n    \n    local stations = {}\n    for i = 1, #allStations do\n        local string = toobjc(allStations[i])\n        local components = string:componentsSeparatedByString(\"|\")\n        local station = Station:init()\n        station:setSimpleCode(components[1])\n        station:setName(components[2])\n        station:setCode(components[3])\n        station:setPinyin(components[4])\n        station:setFirstLetter(components[5])\n        \n        local array = toobjc(popStationCodes)\n        if array:containsObject(station:code()) then\n            station:setIsPopStation(true)\n            station:setHotIndex(array:indexOfObject(station:code()))\n        else\n            station:setIsPopStation(false)\n            station:setHotIndex(-1)\n        end\n        \n        stations[i] = station\n    end\n    \n    return toobjc(stations)\nend\n\nfunction GetTrains(elements)\n    local trains = {}\n    for i = 1, #elements do\n        local trainDict = elements[i]\n        local train = Train:init()\n        train:setTrainId(trainDict[\"id\"])\n        train:setNumber(trainDict[\"value\"])\n        train:setStartTime(trainDict[\"start_time\"])\n        train:setEndTime(trainDict[\"end_time\"])\n        \n        local startStation = Station:init()\n        startStation:setName(trainDict[\"start_station_name\"])\n        \n        local endStation = Station:init()\n        endStation:setName(trainDict[\"end_station_name\"])\n        \n        train:setStartStation(startStation)\n        train:setEndStation(endStation)\n        \n        trains[i] = train\n    end\n    \n    return toobjc(trains)\nend\n\nfunction GetTickets(dict)\n    local ticketDescs = dict[\"tickets\"]\n    local tickets = {}\n    for i = 1, #ticketDescs do\n        local desc = toobjc(ticketDescs[i])\n        desc = toobjc(desc:stringByReplacingOccurrencesOfString_withString(\"&nbsp;\", \"\"))\n        local components = desc:componentsSeparatedByString(\",\")\n        \n        local ticket = Ticket:init()\n        local train = Train:init()\n        local startStation = Station:init()\n        local endStation = Station:init()\n        \n        local component0 = toobjc(components[1])\n        local temp = toobjc(component0:componentsSeparatedByString(\">\")[2])\n        train:setNumber(temp:componentsSeparatedByString(\"<\")[1])\n        \n        temp = toobjc(component0:componentsSeparatedByString(\"('\")[2])\n        temp = toobjc(temp:componentsSeparatedByString(\"')\")[1])\n        train:setTrainId(temp:componentsSeparatedByString(\"#\")[1])\n        startStation:setCode(temp:componentsSeparatedByString(\"#\")[2])\n        endStation:setCode(temp:componentsSeparatedByString(\"#\")[3])\n        \n        local component1 = toobjc(components[2])\n        temp = component1:componentsSeparatedByString(\">\")\n        train:setStartTime(temp[#temp])\n        if string.find(components[2], \"<img\") == nil then\n            temp = toobjc(component1:componentsSeparatedByString(\">\")[1])\n            startStation:setName(temp:componentsSeparatedByString(\"<\")[1])\n        else\n            temp = toobjc(component1:componentsSeparatedByString(\">\")[2])\n            startStation:setName(temp:componentsSeparatedByString(\"<\")[1])\n            startStation:setStationType(FirstStaion)\n        end\n        \n        local component2 = toobjc(components[3])\n        temp = component2:componentsSeparatedByString(\">\")\n        train:setEndTime(temp[#temp])\n        if string.find(components[3], \"<img\") == nil then\n            temp = toobjc(component2:componentsSeparatedByString(\">\")[1])\n            endStation:setName(temp:componentsSeparatedByString(\"<\")[1])\n        else\n            temp = toobjc(component2:componentsSeparatedByString(\">\")[2])\n            endStation:setName(temp:componentsSeparatedByString(\"<\")[1])\n            endStation:setStationType(LastStation)\n        end\n        \n        train:setStartStation(startStation)\n        train:setEndStation(endStation)\n        train:setLastTime(components[4])\n        \n        ticket:setTrain(train)\n        \n        local seatDescDict = {[\"--\"] = -2, [\"<font color='#008800'>有</font>\"] = -1, [\"<font color='darkgray'>无</font>\"] = 0}\n        ticket:setBusiness(seatDescDict[components[5]] or components[5])\n        ticket:setTopGrade(seatDescDict[components[6]] or components[6])\n        ticket:setFirstClass(seatDescDict[components[7]] or components[7])\n        ticket:setSecondClass(seatDescDict[components[8]] or components[8])\n        ticket:setHighGradeCushioned(seatDescDict[components[9]] or components[9])\n        ticket:setCushioned(seatDescDict[components[10]] or components[10])\n        ticket:setSemiCushioned(seatDescDict[components[11]] or components[11])\n        ticket:setSoftSeat(seatDescDict[components[12]] or components[12])\n        ticket:setHardSeat(seatDescDict[components[13]] or components[13])\n        ticket:setSeatless(seatDescDict[components[14]] or components[14])\n        ticket:setOther(seatDescDict[components[15]] or components[15])\n        \n        local extraComponent = toobjc(components[16])\n        if string.find(components[16], \"btn\") == nil then\n            ticket:setCanOrder(\"Y\")\n        else\n            if string.find(components[16], \"onclick\") == nil then\n                ticket:setCanOrder(\"N\")\n            else\n                ticket:setCanOrder(\"Y\")\n                temp = toobjc(extraComponent:componentsSeparatedByString(\"('\")[2])\n                temp = toobjc(temp:componentsSeparatedByString(\"')\")[1])\n                \n                ticket:setFromStationNo(temp:componentsSeparatedByString(\"#\")[10])\n                ticket:setToStationNo(temp:componentsSeparatedByString(\"#\")[11])\n                ticket:setCode(temp:componentsSeparatedByString(\"#\")[12])\n                ticket:setExtraArray({{[\"name\"] = \"mmStr\", [\"value\"] = (temp:componentsSeparatedByString(\"#\")[13])}, {[\"name\"] = \"locationCode\", [\"value\"] = (temp:componentsSeparatedByString(\"#\")[14])}})\n            end\n        end\n        \n        tickets[i] = ticket\n    end\n\n\treturn toobjc(tickets)\nend\n\nfunction GetSeatPrice(seatName, priceDescs)\n\tfor i = 1, #priceDescs do\n\t\tlocal priceDesc = priceDescs[i]\n\t\tlocal a, b = string.find(priceDesc, seatName)\n\t\tif a == 1 and b == string.len(seatName) then\n\t\t\tlocal temp = toobjc(priceDesc)\n\t\t\ttemp = toobjc(temp:componentsSeparatedByString(\"(\")[2])\n\t\t\treturn toobjc(temp:componentsSeparatedByString(\"元\")[1])\n\t\tend\n\tend\nend\n\nfunction GetPassengers(passengerDicts)\n    local passengers = {}\n    for i = 1, #passengerDicts do\n        local passenger = Passenger:init()\n        local passengerDict = passengerDicts[i]\n        passenger:setName(passengerDict[\"passenger_name\"])\n        passenger:setCertCode(passengerDict[\"passenger_id_type_code\"])\n        passenger:setCertNo(passengerDict[\"passenger_id_no\"])\n        passenger:setPassengerTypeCode(passengerDict[\"passenger_type\"])\n        passenger:setMobile(passengerDict[\"mobile_no\"])\n        \n        passengers[i] = passenger\n    end\n    return toobjc(passengers)\nend\n\nfunction GetOrderTickets(elements)\n    local tickets = {}\n    for i = 1, #elements do\n        local element = elements[i]\n        \n        if #element:children() == 24 and #table.keys(element:attributes()) == 0 then\n            local orderTicket = OrderTicket:init()\n            \n            local tds = {}\n            local subElements = element:children()\n            for j = 1, #subElements do\n                local subElement = subElements[j]\n                local a, b = string.find(subElement:tagName(), \"td\")\n                if a == 1 and b == string.len(subElement:tagName()) then\n                    tds[#tds + 1] = subElement\n                end\n            end\n            local passenger = Passenger:init()\n            passenger:setName(tds[1]:firstChild():content())\n            passenger:setCertName(tds[2]:firstChild():content())\n            passenger:setCertNo(tds[3]:firstChild():content())\n            orderTicket:setPassenger(passenger)\n\n            orderTicket:setDate(tds[4]:firstChild():content())\n            orderTicket:setStartStation(tds[5]:children()[1]:firstChild():content())\n            \n            local temp = toobjc(tds[5]:children()[3]:firstChild():content())\n            temp = toobjc(temp:stringByReplacingOccurrencesOfString_withString(\"开\", \"\"))\n            orderTicket:setStartTime(temp:stringByTrimmingCharactersInSet(NSCharacterSet:whitespaceAndNewlineCharacterSet()))\n            \n            orderTicket:setEndStation(tds[6]:children()[1]:firstChild():content())\n            \n            temp = toobjc(tds[6]:children()[3]:firstChild():content())\n            temp = toobjc(temp:stringByReplacingOccurrencesOfString_withString(\"开\", \"\"))\n            orderTicket:setEndTime(temp:stringByTrimmingCharactersInSet(NSCharacterSet:whitespaceAndNewlineCharacterSet()))\n            \n            orderTicket:setType(tds[7]:firstChild():content())\n            orderTicket:setTrainNumber(tds[8]:firstChild():content())\n            orderTicket:setSeatType(tds[9]:firstChild():content())\n            orderTicket:setCarriageNumber(tds[10]:firstChild():content())\n            \n            local seatNumber = tds[11]:firstChild()\n            while #seatNumber:children() > 0 do\n                seatNumber = seatNumber:firstChild()\n            end\n            \n            orderTicket:setSeatNumber(seatNumber:content())\n            \n            temp = toobjc(tds[12]:firstChild():content())\n            temp = toobjc(temp:stringByReplacingOccurrencesOfString_withString(\"开\", \"\"))\n            orderTicket:setPrice(temp:stringByTrimmingCharactersInSet(NSCharacterSet:whitespaceAndNewlineCharacterSet()))\n            \n            tickets[#tickets + 1] = orderTicket\n        end\n    end\n    \n    return toobjc(tickets)\nend\n\nfunction GetIncompleteHistoryOrders(elements)\n    local orders = {}\n    for i = 1, #elements do\n        local element = elements[i]\n        local order = HistoryOrder:init()\n        local orderTickets = {}\n        \n        local ticketElements = element:children()\n        for j = 1, #ticketElements do\n            local ticketElement = ticketElements[j]\n            local a, b = string.find(ticketElement:tagName(), \"tr\")\n            local count = #ticketElement:children()\n            local c = string.find(ticketElement:description(), \"scope\")\n            local d = string.find(ticketElement:description(), \"失败\")\n            if  a == 1 and b == string.len(ticketElement:tagName()) and count == 8 and c == nil and d == nil then\n                local ticket = OrderTicket:init()\n                local temp = nil\n                local tempElement = ticketElement:firstChild():children()[2]\n                if order:sequenceNo() == nil then\n                    temp = toobjc(tempElement:objectForKey(\"name\"))\n                    order:setSequenceNo(temp:stringByReplacingOccurrencesOfString_withString(\"checkbox_pay_\", \"\"))\n                end\n                \n                if order:key() == nil then\n                    order:setKey(tempElement:objectForKey(\"value\"))\n                end\n                \n                ticket:setKey(tempElement:objectForKey(\"value\"))\n                \n                tempElement = ticketElement:firstChild():children()[3]\n                temp = toobjc(tempElement:content())\n                ticket:setDate(temp:stringByTrimmingCharactersInSet(NSCharacterSet:whitespaceAndNewlineCharacterSet()))\n                \n                tempElement = ticketElement:firstChild():children()[5]\n                temp = toobjc(tempElement:content())\n                ticket:setTrainNumber(temp:stringByTrimmingCharactersInSet(NSCharacterSet:whitespaceAndNewlineCharacterSet()))\n                \n                tempElement = ticketElement:firstChild():children()[7]\n                temp = toobjc(tempElement:content())\n                temp = toobjc(temp:stringByTrimmingCharactersInSet(NSCharacterSet:whitespaceAndNewlineCharacterSet()))\n                ticket:setStartStation(temp:componentsSeparatedByString(\"—\")[1])\n                ticket:setEndStation(temp:componentsSeparatedByString(\"—\")[2])\n                \n                tempElement = ticketElement:firstChild():children()[9]\n                temp = toobjc(tempElement:content())\n                temp = toobjc(temp:stringByTrimmingCharactersInSet(NSCharacterSet:whitespaceAndNewlineCharacterSet()))\n                ticket:setStartTime(temp:stringByReplacingOccurrencesOfString_withString(\"开\", \"\"))\n                \n                tempElement = ticketElement:children()[3]:children()[1]\n                temp = toobjc(tempElement:content())\n                temp = toobjc(temp:stringByTrimmingCharactersInSet(NSCharacterSet:whitespaceAndNewlineCharacterSet()))\n                ticket:setCarriageNumber(temp:firstNumericalSubString())\n                \n                tempElement = ticketElement:children()[3]:children()[3]\n                temp = toobjc(tempElement:content())\n                ticket:setSeatNumber(temp:stringByTrimmingCharactersInSet(NSCharacterSet:whitespaceAndNewlineCharacterSet()))\n                \n                tempElement = ticketElement:children()[3]:children()[5]\n                temp = toobjc(tempElement:content())\n                ticket:setSeatType(temp:stringByTrimmingCharactersInSet(NSCharacterSet:whitespaceAndNewlineCharacterSet()))\n                \n                tempElement = ticketElement:children()[3]:children()[7]\n                temp = toobjc(tempElement:content())\n                temp = toobjc(temp:stringByTrimmingCharactersInSet(NSCharacterSet:whitespaceAndNewlineCharacterSet()))\n                ticket:setType(temp:componentsSeparatedByString(\",\")[1])\n                \n                temp = toobjc(temp:stringByReplacingOccurrencesOfString_withString(ticket:type(), \"\"))\n                temp = toobjc(temp:stringByReplacingOccurrencesOfString_withString(\"元\", \"\"))\n                temp = toobjc(temp:stringByReplacingOccurrencesOfString_withString(\",\", \"\"))\n                ticket:setPrice(temp:stringByTrimmingCharactersInSet(NSCharacterSet:whitespaceAndNewlineCharacterSet()))\n                \n                local passenger = Passenger:init()\n                \n                tempElement = ticketElement:children()[5]:children()[1]\n                temp = toobjc(tempElement:content())\n                passenger:setName(temp:stringByTrimmingCharactersInSet(NSCharacterSet:whitespaceAndNewlineCharacterSet()))\n                \n                tempElement = ticketElement:children()[5]:children()[3]\n                temp = toobjc(tempElement:content())\n                passenger:setCertName(temp:stringByTrimmingCharactersInSet(NSCharacterSet:whitespaceAndNewlineCharacterSet()))\n                \n                ticket:setPassenger(passenger)\n                \n                tempElement = ticketElement:children()[7]:children()[1]\n                temp = toobjc(tempElement:content())\n                temp = toobjc(temp:stringByTrimmingCharactersInSet(NSCharacterSet:whitespaceAndNewlineCharacterSet()))\n                ticket:setStatus(temp:substringToIndex(3))\n                \n                orderTickets[#orderTickets + 1] = ticket\n            end\n        end\n        \n        order:setOrderTickets(orderTickets)\n        \n        if #order:orderTickets() > 0 then \n            orders[#orders + 1] = order\n        end\n    end\n    \n    return toobjc(orders)\nend\n\nfunction GetCompleteHistoryOrders(elements)\n    local orders = {}\n    for i = 1, #elements do\n        local element = elements[i]\n        local order = HistoryOrder:init()\n        local orderTickets = {}\n        \n        local ticketElements = element:children()\n        for j = 1, #ticketElements do\n            local ticketElement = ticketElements[j]\n            local a, b = string.find(ticketElement:tagName(), \"tr\")\n            local count = #ticketElement:children()\n            local c = string.find(ticketElement:description(), \"scope\")\n            if  a == 1 and b == string.len(ticketElement:tagName()) and count == 12 and c == nil then\n                local ticket = OrderTicket:init()\n                local temp = nil\n                \n                local tempElement = ticketElement:firstChild():children()[2]\n                if tempElement then\n                    if order:sequenceNo() == nil then\n                        temp = toobjc(tempElement:objectForKey(\"name\"))\n                        order:setSequenceNo(temp:stringByReplacingOccurrencesOfString_withString(\"checkbox_all_\", \"\"))\n                    end\n                    \n                    if order:key() == nil then\n                        order:setKey(tempElement:objectForKey(\"value\"))\n                    end\n                end\n\n                tempElement = ticketElement:children()[3]:children()[1]\n                temp = toobjc(tempElement:content())\n                ticket:setDate(temp:stringByTrimmingCharactersInSet(NSCharacterSet:whitespaceAndNewlineCharacterSet()))\n                \n                tempElement = ticketElement:children()[3]:children()[3]\n                temp = toobjc(tempElement:content())\n                ticket:setTrainNumber(temp:stringByTrimmingCharactersInSet(NSCharacterSet:whitespaceAndNewlineCharacterSet()))\n                \n                tempElement = ticketElement:children()[3]:children()[5]\n                temp = toobjc(tempElement:content())\n                temp = toobjc(temp:stringByTrimmingCharactersInSet(NSCharacterSet:whitespaceAndNewlineCharacterSet()))\n                ticket:setStartStation(temp:componentsSeparatedByString(\"—\")[1])\n                ticket:setEndStation(temp:componentsSeparatedByString(\"—\")[2])\n                \n                tempElement = ticketElement:children()[3]:children()[7]\n                temp = toobjc(tempElement:content())\n                temp = toobjc(temp:stringByTrimmingCharactersInSet(NSCharacterSet:whitespaceAndNewlineCharacterSet()))\n                ticket:setStartTime(temp:stringByReplacingOccurrencesOfString_withString(\"开\", \"\"))\n                \n                tempElement = ticketElement:children()[5]:children()[1]\n                temp = toobjc(tempElement:content())\n                temp = toobjc(temp:stringByTrimmingCharactersInSet(NSCharacterSet:whitespaceAndNewlineCharacterSet()))\n                ticket:setCarriageNumber(temp:firstNumericalSubString())\n                \n                tempElement = ticketElement:children()[5]:children()[3]\n                temp = toobjc(tempElement:content())\n                ticket:setSeatNumber(temp:stringByTrimmingCharactersInSet(NSCharacterSet:whitespaceAndNewlineCharacterSet()))\n                \n                tempElement = ticketElement:children()[5]:children()[5]\n                temp = toobjc(tempElement:content())\n                ticket:setSeatType(temp:stringByTrimmingCharactersInSet(NSCharacterSet:whitespaceAndNewlineCharacterSet()))\n                \n                tempElement = ticketElement:children()[5]:children()[7]\n                temp = toobjc(tempElement:content())\n                temp = toobjc(temp:stringByTrimmingCharactersInSet(NSCharacterSet:whitespaceAndNewlineCharacterSet()))\n                ticket:setType(temp:componentsSeparatedByString(\",\")[1])\n                \n                temp = toobjc(temp:stringByReplacingOccurrencesOfString_withString(ticket:type(), \"\"))\n                temp = toobjc(temp:stringByReplacingOccurrencesOfString_withString(\"元\", \"\"))\n                temp = toobjc(temp:stringByReplacingOccurrencesOfString_withString(\",\", \"\"))\n                ticket:setPrice(temp:stringByTrimmingCharactersInSet(NSCharacterSet:whitespaceAndNewlineCharacterSet()))\n                \n                local passenger = Passenger:init()\n                \n                tempElement = ticketElement:children()[7]:children()[1]\n                temp = toobjc(tempElement:content())\n                passenger:setName(temp:stringByTrimmingCharactersInSet(NSCharacterSet:whitespaceAndNewlineCharacterSet()))\n                \n                tempElement = ticketElement:children()[7]:children()[3]\n                temp = toobjc(tempElement:content())\n                passenger:setCertName(temp:stringByTrimmingCharactersInSet(NSCharacterSet:whitespaceAndNewlineCharacterSet()))\n                \n                ticket:setPassenger(passenger)\n                \n                tempElement = ticketElement:children()[9]:children()[1]\n                temp = toobjc(tempElement:content())\n                temp = toobjc(temp:stringByTrimmingCharactersInSet(NSCharacterSet:whitespaceAndNewlineCharacterSet()))\n                ticket:setStatus(temp:substringToIndex(3))\n                \n                orderTickets[#orderTickets + 1] = ticket\n            end\n        end\n        \n        order:setOrderTickets(orderTickets)\n        \n        if #order:orderTickets() > 0 then \n            orders[#orders + 1] = order\n        end\n    end\n    \n    return toobjc(orders)\nend\n\nfunction GetOrderPrepareInfoExtraArray(dict)\n    return toobjc({{name = \"token\", value = dict[\"token\"]}, {name = \"leftTicketStr\", value = dict[\"leftTicketStr\"]}})\nend\n\nfunction GetHarmoniousMsg(msg)\n    local retMsg\n    if string.find(msg, \"非法的订票请求\") == nil then\n        retMsg = msg\n    else\n        retMsg = \"订票失败，请稍后再试\"\n    end\n    \n    return toobjc(retMsg)\nend"
}